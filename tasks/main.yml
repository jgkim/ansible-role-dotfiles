---
- name: Ensure the dotfiles repository is cloned locally.
  git:
    repo: "{{ dotfiles_remote }}"
    dest: "{{ dotfiles_local }}"

- name: Find all dotfiles to link.
  command: find {{ dotfiles_local }} -maxdepth 1 -name ".*" -exec basename \{} \;
  register: dotfiles
  always_run: yes
  changed_when: False

- name: Ensure all dotfiles except ignored ones are links.
  command: ls -F {{ dotfiles_home }}/{{ item }}
  register: existing_dotfiles
  with_items: "{{ dotfiles.stdout_lines }}"
  when: "item not in dotfiles_ignore"
  always_run: yes
  failed_when: False
  changed_when: False

- name: Remove the existing dotfile if a replacement is being linked.
  file:
    path: "{{ dotfiles_home }}/{{ dotfiles.stdout_lines[item.0] }}"
    state: absent
  when: "(dotfiles.stdout_lines[item.0] not in dotfiles_ignore) and ('@' not in item.1.stdout)"
  with_indexed_items: "{{ existing_dotfiles.results }}"

- name: Link dotfiles into the home folder.
  file:
    src: "{{ dotfiles_local }}/{{ item }}"
    dest: "{{ dotfiles_home }}/{{ item }}"
    state: link
  with_items: "{{ dotfiles.stdout_lines }}"
  when: "item not in dotfiles_ignore"
